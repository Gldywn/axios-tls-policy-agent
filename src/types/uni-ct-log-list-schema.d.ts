/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Set to true when the list contains all known logs, including not yet usable and no longer usable ones.
 */
export type WhetherThisListContainsAllKnownLogs = boolean;
/**
 * The version will change whenever a change is made to any part of this log list.
 */
export type VersionOfThisLogList = string;
export type NameOfThisLogOperator = string;
/**
 * The log operator can be contacted using any of these email addresses.
 *
 * @minItems 1
 */
export type CTLogOperatorEmailAddresses = [string, ...string[]];
/**
 * The API endpoints are defined in https://tools.ietf.org/html/rfc6962#section-4.
 */
export type TheBaseURLOfTheCTLogSHTTPAPI = string;
/**
 * A human-readable description that can be used to identify this log.
 */
export type DescriptionOfTheCTLog = string;
/**
 * The log's public key as a DER-encoded ASN.1 SubjectPublicKeyInfo structure, then encoded as base64 (https://tools.ietf.org/html/rfc5280#section-4.1.2.7).
 */
export type ThePublicKeyOfTheCTLog = string;
/**
 * This is the LogID found in SCTs issued by this log (https://tools.ietf.org/html/rfc6962#section-3.2).
 */
export type TheSHA256HashOfTheCTLogSPublicKeyBase64Encoded = string;
/**
 * The CT log should not take longer than this to incorporate a certificate (https://tools.ietf.org/html/rfc6962#section-3).
 */
export type TheMaximumMergeDelayInSeconds = number;
/**
 * The API endpoints are defined in https://github.com/google/certificate-transparency-rfcs/blob/master/dns/draft-ct-over-dns.md.
 */
export type TheDomainNameOfTheCTLogSDNSAPI = string;
/**
 * The API endpoints are defined in https://c2sp.org/static-ct-api
 */
export type TheSubmissionPrefixOfTheLog = string;
/**
 * The API endpoints are defined in https://c2sp.org/static-ct-api
 */
export type TheMonitoringPrefixOfTheLog = string;
/**
 * People/organizations that run Certificate Transparency logs.
 */
export type CTLogOperators = {
  name?: NameOfThisLogOperator;
  email?: CTLogOperatorEmailAddresses;
  /**
   * Details of RFC6962 Certificate Transparency logs run by this operator.
   */
  logs?: Log[];
  /**
   * Details of Static CT API Certificate Transparency logs run by this operator.
   */
  tiled_logs?: Log1[];
  [k: string]: unknown;
}[];
/**
 * (V1 compatibility) asset version in which this log list was included
 */
export type AssetVersionContainingThisLogList = number;
/**
 * V2 compatibility asset version in which this log list was included
 */
export type AssetVersionContainingThisLogList1 = number;

export interface UnifiedCertificateTransparencyLogList {
  is_all_logs?: WhetherThisListContainsAllKnownLogs;
  version?: VersionOfThisLogList;
  /**
   * The time at which this version of the log list was published.
   */
  log_list_timestamp?: string;
  operators?: CTLogOperators;
  assetVersion?: AssetVersionContainingThisLogList;
  assetVersionV2?: AssetVersionContainingThisLogList1;
  [k: string]: unknown;
}
export interface Log {
  url?: TheBaseURLOfTheCTLogSHTTPAPI;
  description?: DescriptionOfTheCTLog;
  key?: ThePublicKeyOfTheCTLog;
  log_id?: TheSHA256HashOfTheCTLogSPublicKeyBase64Encoded;
  mmd?: TheMaximumMergeDelayInSeconds;
  dns?: TheDomainNameOfTheCTLogSDNSAPI;
  /**
   * The log will only accept certificates that expire (have a NotAfter date) between these dates.
   */
  temporal_interval?: {
    /**
     * All certificates must expire on this date or later.
     */
    start_inclusive?: string;
    /**
     * All certificates must expire before this date.
     */
    end_exclusive?: string;
    [k: string]: unknown;
  };
  /**
   * The purpose of this log, e.g. test.
   */
  log_type?: 'prod' | 'test';
  state?: unknown;
  [k: string]: unknown;
}
export interface Log1 {
  submission_url?: TheSubmissionPrefixOfTheLog;
  monitoring_url?: TheMonitoringPrefixOfTheLog;
  [k: string]: unknown;
}
